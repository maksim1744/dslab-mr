var searchIndex = new Map(JSON.parse('[\
["dslab_dfs",{"doc":"","t":"CCCCCFFFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOONNNNNNNNNNNNNNNNNNNNNNOONOONNNNNNNNNONNNNNNNNNNOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIIFNNNNNONNONNNNNNNNNNHHHHHHCPGPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNKM","n":["dfs","host_info","network","replication_strategies","replication_strategy","ChunkAlreadyExists","CopiedChunk","CopyChunk","DistributedFileSystem","EraseChunkOnHost","NoSuchChunkOnHost","NotEnoughSpace","RegisterData","RegisteredData","UnknownHost","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","chunk_id","chunk_id","chunk_id","chunk_id","chunk_id","chunk_location","chunk_size","chunks_location","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","data_chunks","data_id","data_id","datas_chunks","dst","dst","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","free_space","from","from","from","from","from","from","from","from","from","from","host","host","host","host","host","host","hosts_info","id","into","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","need_space","need_to_replicate","new","next_data_id","on","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","size","src","src","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","ChunkId","DataId","HostInfo","__clone_box","as_any","as_any_mut","borrow","borrow_mut","chunks","clone","clone_into","free_space","from","into","into_any","into_any_arc","into_any_rc","to_owned","try_from","try_into","type_id","vzip","get_all_racks","get_rack","make_constant_network","make_fat_tree_topology","make_shared_network","make_tree_topology","random","AllowEverything","ChunkDistribution","ProhibitSameRack","RandomReplicationStrategy","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","from","from","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","new","register_chunks","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","ReplicationStrategy","register_chunks"],"q":[[0,"dslab_dfs"],[5,"dslab_dfs::dfs"],[229,"dslab_dfs::host_info"],[251,"dslab_dfs::network"],[257,"dslab_dfs::replication_strategies"],[258,"dslab_dfs::replication_strategies::random"],[290,"dslab_dfs::replication_strategy"],[292,"dyn_clone::sealed"],[293,"core::any"],[294,"dslab_core::component"],[295,"alloc::collections::btree::set"],[296,"core::option"],[297,"std::collections::hash::map"],[298,"alloc::vec"],[299,"erased_serde::ser"],[300,"erased_serde::ser"],[301,"core::result"],[302,"alloc::collections::btree::map"],[303,"alloc::boxed"],[304,"alloc::sync"],[305,"alloc::rc"],[306,"dslab_network::network"],[307,"core::cell"],[308,"dslab_core::context"],[309,"dslab_core::event"],[310,"serde::ser"],[311,"core::any"],[312,"dslab_core::simulation"]],"d":["Model of a distributed file system.","Model of a host in DFS.","Common network topologies and useful functions.","Implementations of some replication strategies.","Trait for a replication strategy.","Response to CopyChunk in case the chunk already exists on …","Response to the corresponding CopyChunk event.","Event to copy chunk <code>chunk_id</code> from <code>src</code> to <code>dst</code>.","Model of a distributed file system.","Event to erase a chunk from host.","Response to CopyChunk or EraseChunkOnHost in case …","Response to CopyChunk in case there is not enough space on …","Event to register data in DFS.","Response to the corresponding RegisterData event after all …","A response to some incoming event notifying that requested …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Chunk id.","Chunk id.","Chunk id.","Requested chunk.","Chunk id.","Returns locations of all chunk replicas.","Chunk size.","Same as DistributedFileSystem::chunk_location, but <code>HashMap</code> …","","","","","","","","","","","","","","","","","","","Returns chunk ids of chunks which data <code>data_id</code> was split …","Id of the data.","","Same as DistributedFileSystem::data_chunks, but <code>HashMap</code> …","Where to copy to.","Host where the chunk was copied.","","","","","","","","","","Current amount of free space.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Host with the data.","Host with the chunk.","Unknown host.","Host with the error.","Target host.","Target host.","Map with info about all hosts in the system.","Returns simulation id of the component.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Requested space.","Additional flag which will be passed to replication …","Creates new DistributedFileSystem.","Next data id which can be used when registering new data.","","","","","","","","","","","Size of the data.","Host with the chunk.","Host with the chunk.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Model of a host in DFS.","","","","","","Set of all chunks on a host.","","","Amount of free space left on a host.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Returns rack id for all nodes in a network.","Returns rack id for a given simulation component.","Creates constant bandwidth network with given bandwidth.","Creates fat tree topology.","Creates shared bandwidth network with given bandwidth.","Creates tree topology with <code>star_count</code> racks and …","Randomized replication strategy.","Allow putting chunk replicas on the same rack.","Represents rules for chunk distribution.","Prohibit putting chunk replicas on the same rack.","Replication strategy which places each chunk on uniformly …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Creates new RandomReplicationStrategy with given …","","","","","","","","","","Trait for a replication strategy.","Function which is called once per every RegisterData event."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,12,13,14,15,16,17,18,19,4,11,12,13,14,15,16,17,18,19,4,11,12,13,14,15,16,17,18,19,4,11,12,13,14,15,16,17,18,19,4,11,12,13,14,15,16,17,18,19,13,14,15,17,19,4,4,4,11,12,13,14,15,16,17,18,19,11,12,13,14,15,16,17,18,19,4,11,12,4,13,14,11,12,13,14,15,16,17,18,19,18,4,11,12,13,14,15,16,17,18,19,11,15,16,17,18,19,4,4,4,11,12,13,14,15,16,17,18,19,4,11,12,13,14,15,16,17,18,19,11,12,13,14,15,16,17,18,19,4,11,12,13,14,15,16,17,18,19,18,11,4,4,4,11,12,13,14,15,16,17,18,19,11,13,14,11,12,13,14,15,16,17,18,19,4,11,12,13,14,15,16,17,18,19,4,11,12,13,14,15,16,17,18,19,4,11,12,13,14,15,16,17,18,19,4,11,12,13,14,15,16,17,18,19,0,0,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,0,0,0,0,0,42,0,42,0,42,43,42,43,42,43,42,43,42,43,42,43,42,43,42,43,42,43,43,43,42,43,42,43,42,43,42,43,0,33],"f":"```````````````{{cb}d{}}00000000{cf{}}0000000000000000000{ce{}{}}0000000000000000000`````{{hj}{{A`{{n{l}}}}}}{hAb}{h{{Ad{j{n{l}}}}}}{AfAf}{AhAh}{AjAj}{AlAl}{AnAn}{B`B`}{BbBb}{BdBd}{BfBf}{{ce}d{}{}}00000000{{hBh}{{A`{{Bj{j}}}}}}``{h{{Ad{Bh{Bj{j}}}}}}``{{cBl}{{Cb{BnC`}}}{}}00000000`{cc{}}000000000``````{h{{Cf{lCd}}}}{hl}{ce{}{}}000000000{{{Ch{c}}}{{Ch{f}}}{}}000000000{{{Cj{c}}}{{Cj{f}}}{}}00000000{{{Cl{c}}}{{Cl{f}}}{}}000000000``{{{Cf{lCd}}{Ad{Bh{Bj{j}}}}{Cl{{D`{Cn}}}}{Ch{Db}}AbDd}h}{hAb}{{hDf}d}{{Afc}CbDh}{{Ahc}CbDh}{{Ajc}CbDh}{{Alc}CbDh}{{Anc}CbDh}{{B`c}CbDh}{{Bbc}CbDh}{{Bdc}CbDh}{{Bfc}CbDh}```?????????{c{{Cb{e}}}{}{}}0000000000000000000{cDj{}}000000000{ce{}{}}000000000```{{cb}d{}}{cf{}}022`{CdCd}{{ce}d{}{}}`{cc{}}5{{{Ch{c}}}{{Ch{f}}}{}}{{{Cj{c}}}{{Cj{f}}}{}}{{{Cl{c}}}{{Cl{f}}}{}}8::98{Cn{{Cf{DlAb}}}}{{Cnl}{{A`{Ab}}}}{{DnE`E`EbEb}{{Cl{{D`{Cn}}}}}}{{DnE`E`E`EbEbEb}{{Cl{{D`{Cn}}}}}}1{{DnE`E`EbEbEb}{{Cl{{D`{Cn}}}}}}`````;;;;====88==776655{{E`Ed}Ef}{{EfAbl{Eh{j}}Ej{Cf{lCd}}Cn}{{Cf{j{Bj{l}}}}}}{c{{Cb{e}}}{}{}}000{cDj{}}0{ce{}{}}0`{{DbAbl{Eh{j}}Ej{Cf{lCd}}Cn}{{Cf{j{Bj{l}}}}}}","c":[],"p":[[5,"Private",292],[1,"unit"],[10,"Any",293],[5,"DistributedFileSystem",5],[8,"ChunkId",229],[8,"Id",294],[5,"BTreeSet",295],[6,"Option",296],[1,"u64"],[5,"HashMap",297],[5,"RegisterData",5],[5,"RegisteredData",5],[5,"CopyChunk",5],[5,"CopiedChunk",5],[5,"EraseChunkOnHost",5],[5,"UnknownHost",5],[5,"NoSuchChunkOnHost",5],[5,"NotEnoughSpace",5],[5,"ChunkAlreadyExists",5],[8,"DataId",229],[5,"Vec",298],[10,"Serializer",299],[5,"Ok",299],[5,"Error",300],[6,"Result",301],[5,"HostInfo",229],[5,"BTreeMap",302],[5,"Box",303],[5,"Arc",304],[5,"Rc",305],[5,"Network",306],[5,"RefCell",307],[10,"ReplicationStrategy",290],[5,"SimulationContext",308],[5,"Event",309],[10,"Serializer",310],[5,"TypeId",293],[8,"NodeId",311],[5,"Simulation",312],[1,"usize"],[1,"f64"],[6,"ChunkDistribution",258],[5,"RandomReplicationStrategy",258],[1,"slice"],[1,"bool"]],"b":[]}],\
["dslab_mr",{"doc":"","t":"CCCCCCCCCCCCFFPFGPPPFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNOOONNNNNNNNNNNNNNNNNNNNNNNNOOOOFNNNOONNNNOONONNNOOONNNNNFFKFFKFNNNNNNNNNNNNNNNNNNNNNNNNNMNONMNONNNNNONMNNOONNNNNNNNNNNNNNNNNNNNMNONNNMNONNMNONNNNNONNNNNNNNNNNNNNNNNNNNNPGPPNNNNNNNNNNNNNNNNNNNOOOOOOFFFNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNONOOOONONONNNNNNNNNNNNNNGPFFFFFFFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOONNNNNNNNNNNNNNNNNNONNNNNNNNNOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOONNNNNNNNNOOOOOOONNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNCCCCHHFNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNFNNNNNNNNNNNNNNNNNNNNKFKFFNNNNNNNNNNNNONNNNNNOOOONNNNNNNNNNNNMMMMNNOOOONNNNNNNNNNNNFNNNONNNNOONNNNNNNNNOOOOONNNNNNNNOOOOOONNNNFFNNNNNNNNNNNONNNNONNNNNNNNNNNNNNNNNNNNPPFGPFPNNNNNNNNNOOONNNNNNONNNNNNNNNNNNNNNNONNNNNNNNNNNNOONNNONNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOPPPPPPPFGNNNNNNNNNNNNNNNNNNONNONNNNNNNNNNNNNNNNNNNNNNNNOOOOOOOOOOOOOOOOOOOOOOOOOOOOO","n":["cluster_simulation","compute_host","dag","data_item","experiment","parser","placement_strategies","placement_strategy","run_stats","runner","system","trace","ClusterSimulation","DagPlan","GlobalInput","GlobalInputPlan","InputPlan","Local","RegisterInitially","RegisterOnStart","SimulationPlan","__clone_box","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","dag","dags","deserialize","deserialize","erased_serialize","erased_serialize","from","from","from","from","from","from_yaml","global_inputs","host","input","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","new","run","serialize","serialize","sim","size","start_time","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","host","host","host","id","ComputeHost","__clone_box","as_any","as_any_mut","available_cores","available_memory","borrow","borrow_mut","clone","clone_into","compute","cores","from","host","into","into_any","into_any_rc","memory","name","speed","to_owned","try_from","try_into","type_id","vzip","Connection","Dag","Shuffle","SimpleTask","Stage","Task","UniformShuffle","add_connection","add_initial_data","add_stage","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","completed_stages","connection","cores","cores","cores","default","flops","flops","flops_per_byte","from","from","from","from","from","from","from_yaml","id","id","id","id","id","initial_data","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","mark_completed","mark_started","memory","memory","memory","new","new","outgoing_connections","output_size","output_size","output_size_ratio","ready_stages","running_stages","shuffle","shuffle","shuffle","stage","stage_dependencies","stages","task","tasks","to","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","upload_result_to_dfs","vzip","vzip","vzip","vzip","vzip","Chunk","DataItem","Local","Replicated","__clone_box","as_any","as_any_mut","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_any","into_any_arc","into_any_rc","size","to_owned","try_from","try_into","type_id","vzip","chunk_id","data_id","host","size","size","size","Experiment","Plan","RunResult","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","dags_path","deserialize","erased_serialize","fmt","from","from","from","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","name","new","placement_strategy","plan","plan_path","replication_strategy","run","run_stats","serialize","system","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","ShuffleType","Simple","StageInitialData","YamlConnection","YamlDag","YamlDagPlan","YamlSimulationPlan","YamlStage","YamlStageInputPlan","YamlTask","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","connections","cores","dag","dags","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","erased_serialize","flops_per_byte","from","from","from","from","from","from","from","from","from","from","global_inputs","initial_data","input","input","into","into","into","into","into","into","into","into","into","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","memory","output_size_ratio","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","shuffle","size","stage","stage","stages","start_time","tasks","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upload_result_to_dfs","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","common","locality_aware","packing_scheduler","random","collect_all_input","shuffle","LocalityAwareStrategy","as_any","as_any_mut","borrow","borrow_mut","default","from","into","into_any","into_any_arc","into_any_rc","new","on_stage_completed","on_stage_ready","on_task_completed","place_stage","register_dag","try_from","try_into","type_id","vzip","PackingScheduler","as_any","as_any_mut","borrow","borrow_mut","from","into","into_any","into_any_arc","into_any_rc","new","on_stage_completed","on_stage_ready","on_task_completed","try_from","try_into","type_id","vzip","RandomPlacementStrategy","as_any","as_any_mut","borrow","borrow_mut","default","from","into","into_any","into_any_arc","into_any_rc","new","on_stage_completed","on_stage_ready","on_task_completed","place_stage","register_dag","try_from","try_into","type_id","vzip","DynamicPlacementStrategy","DynamicTaskPlacement","PlacementStrategy","StageActions","TaskPlacement","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","dag_id","fmt","fmt","fmt","from","from","from","host","host","input","input","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","on_stage_completed","on_stage_ready","on_task_completed","place_stage","register_dag","register_dag","remaining_input","stage_id","task_id","task_placements","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","RunStats","__clone_box","as_any","as_any_mut","average_dag_makespan","borrow","borrow_mut","clone","clone_into","completed_dag_count","cpu_utilization","deserialize","erased_serialize","finalize","fmt","from","into","into_any","into_any_arc","into_any_rc","max_dag_makespan","memory_utilization","min_dag_makespan","network_traffic_between_hosts","network_traffic_between_racks","new","register_cpu_utilization","register_dag","register_memory_utilization","register_task_execution","register_transfer","serialize","to_owned","total_chunks_in_dfs","total_cpu_flops","total_dag_count","total_makespan","total_network_traffic","total_space_used","try_from","try_into","type_id","vzip","NewDag","Runner","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","dag","erased_serialize","finalize","from","from","initial_data","into","into","into_any","into_any","into_any_rc","into_any_rc","new","on","run_stats","serialize","to_owned","trace","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Constant","FatTree","HostConfig","NetworkConfig","Shared","SystemConfig","Tree","__clone_box","__clone_box","__clone_box","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","available_cores","available_memory","available_space","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","chunk_size","clone","clone","clone","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","erased_serialize","erased_serialize","erased_serialize","from","from","from","from_yaml","hosts","into","into","into","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","name","network","serialize","serialize","serialize","speed","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","bandwidth","bandwidth","downlink_bw","downlink_bw","hosts_per_rack","hosts_per_rack","hosts_per_star","hosts_per_switch","internal_bw","internal_bw","internal_bw","internal_bw","l1_switch_count","l2_switch_count","racks","racks","star_count","uplink_bw","uplink_bw","DagCompleted","DagStarted","TaskAssigned","TaskCompleted","TaskInQueue","TaskReady","TaskStarted","Trace","TraceEvent","__clone_box","__clone_box","as_any","as_any","as_any_mut","as_any_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","deserialize","deserialize","erased_serialize","erased_serialize","events","from","from","hosts","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","log","new","serialize","serialize","task_path","time","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","cores","dag_id","dag_id","dag_id","dag_id","dag_id","dag_id","dag_id","host","host","host","memory","stage_id","stage_id","stage_id","stage_id","stage_id","task_id","task_id","task_id","task_id","task_id","time","time","time","time","time","time","time"],"q":[[0,"dslab_mr"],[12,"dslab_mr::cluster_simulation"],[116,"dslab_mr::cluster_simulation::InputPlan"],[120,"dslab_mr::compute_host"],[145,"dslab_mr::dag"],[257,"dslab_mr::data_item"],[280,"dslab_mr::data_item::DataItem"],[286,"dslab_mr::experiment"],[350,"dslab_mr::parser"],[524,"dslab_mr::placement_strategies"],[528,"dslab_mr::placement_strategies::common"],[530,"dslab_mr::placement_strategies::locality_aware"],[551,"dslab_mr::placement_strategies::packing_scheduler"],[569,"dslab_mr::placement_strategies::random"],[590,"dslab_mr::placement_strategy"],[652,"dslab_mr::run_stats"],[695,"dslab_mr::runner"],[734,"dslab_mr::system"],[810,"dslab_mr::system::NetworkConfig"],[829,"dslab_mr::trace"],[884,"dslab_mr::trace::TraceEvent"],[913,"dyn_clone::sealed"],[914,"core::any"],[915,"core::result"],[916,"serde::de"],[917,"erased_serde::ser"],[918,"erased_serde::ser"],[919,"std::path"],[920,"std::path"],[921,"alloc::boxed"],[922,"alloc::sync"],[923,"alloc::rc"],[924,"dslab_dfs::replication_strategy"],[925,"core::option"],[926,"serde::ser"],[927,"core::any"],[928,"alloc::collections::btree::set"],[929,"alloc::collections::btree::map"],[930,"dslab_dfs::dfs"],[931,"core::fmt"],[932,"core::fmt"],[933,"dslab_core::component"],[934,"rand_pcg::pcg128"],[935,"dslab_network::network"],[936,"core::cell"],[937,"dslab_core::context"],[938,"dslab_core::event"]],"d":["Simulation wrapper to simplify running cluster simulations.","Model of a host.","Model of a DAG.","Represents a data item.","Helper struct for running multiple experiments.","Tools for loading plans and dags from YAML files.","Implementations of some placement strategies.","Traits for implementing placement strategies.","Some stats from a completed simulation.","Main component of a simulation.","Represents cluster configuration.","Trace of a simulation.","Simulation wrapper to simplify running cluster simulations.","Plan for a single DAG.","See GlobalInputPlan.","Data which will be uploaded to DFS in advance and can be …","Where to get input from for an input stage.","Local data on a host.","Upload input to DFS in advance.","Upload input to DFS right before starting DAG execution.","Plan for a simulation.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","DAG.","Information about DAGs.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Read SimulationPlan from YAML file and dags from YAML …","Global inputs which can be used by all DAGs, see …","Original host of the data.","Information about inputs for all input stages.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Creates new cluster simulation.","Runs simulation and returns results.","","","","Size of the data.","When to start DAG execution. If some inputs are marked as …","","","","","","","","","","","","","","","","","","","","","","","","","Original host with the data.","Original host with the data.","Host with the data.","Index of needed GlobalInputPlan.","Model of a host.","","","","Number of available cores.","Amount of available memory.","","","","","Corresponding Compute resource.","Number of cores.","Returns the argument unchanged.","Host id.","Calls <code>U::from(self)</code>.","","","Amount of memory.","Name of the host.","Speed of a single core on a host.","","","","","","Represent an edge between stages.","Represents DAG of stages.","Trait which represents shuffle edge.","Simple task which implements Task trait.","Represents one stage of a DAG which corresponds to a …","Trait for a task.","Default implementation of Shuffle trait.","Add new connection between stages.","Adds initial data for a stage.","Add new stage.","","","","","","","","","","","","","","","","","","","","","Returns set of all completed stage.","Returns connection by id.","Number of cores needed for a task.","","Number of cores needed for a task.","","Computational complexity of a task given size of input …","","Needed flops ber each byte of input data, used to …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Start of an edge.","Read Dag from YAML file. Panic on error.","Task id.","","Id of the stage.","Id of the task.","Id of the edge.","Returns map of initial data sizes for each stage.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Mark stage as completed.","Mark stage as started.","Amount of memory needed for a task.","","Amount of memory needed for a task.","Creates new task.","Creates new empty DAG.","Returns stage outdoing connections.","Size of the output data of a task given size of input data.","","Ratio of output size to input size, used to implement …","Returns set of all stage ready to be started.","Returns set of all running stage.","Gets input data for a stage and returns vector of size …","","Optional shuffle algorithm for an edge in case it is of …","Returns stage by id.","Returns stage dependencies.","Returns vector of all stages.","Returns task by id.","Information about tasks on a stage.","End of an edge.","","","","","","","","","","","","","","","","Whether to upload all task outputs to DFS or not and save …","","","","","","One chunk from DFS.","Represents a data item.","Piece of local data on a host.","Data which was uploaded to DFS.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Returns size of a data item.","","","","","","","","","","","","Helper struct for running multiple experiments.","Plan which will be converted to SimulationPlan.","Represents result of a single simulation run.","","","","","","","","","","","","","","","","","","","Path to a folder with dags in YAML format.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Plan name.","Creates new experiment. There will be one simulation run …","Placement strategy name.","Plan name.","Path to plan in YAML format.","Replication strategy name.","Run all simulations using given number of threads and …","Statistics from a run.","","System name.","","","","","","","","","","","","","","","Possible shuffle types.","UniformShuffle.","Information about input data for a stage.","Struct representing Connection.","YAML representation of a DAG.","Struct representing DagPlan.","Struct representing SimulationPlan.","Struct representing a Stage.","Struct representing InputPlan.","Struct representing SimpleTask, see parameter description …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Incoming connections.","","Dag name which corresponds to a file name in a provided …","Information about DAGs.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Start of an edge.","Information about global inputs which can be used by all …","Information about initial data for input stages.","Input plan for a stage.","Information about input plans for stages.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Shuffle type for an edge of a shuffle type.","Size of the data.","Stage id.","Stage id.","Information about stages.","Start time of a DAG.","Information about stage tasks.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Whether to upload task outputs to DFS.","","","","","","","","","","Some useful functions for placement strategies.","Implementation of a locality aware strategy.","Implementation of a packing scheduler.","Randomized placement strategy.","Helper function to collect all inputs along with the …","Helper function to randomly shuffle an array.","Implementation of a locality aware strategy.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Creates new strategy.","","","","","","","","","","Implementation of a packing scheduler.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Creates new scheduler.","","","","","","","","Randomized placement strategy.","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Dynamic placement strategy.","Information about one task placement for …","Simplified placement strategy.","Information about task placement from the same stage.","Information about one task placement for PlacementStrategy.","","","","","","","","","","","","","DAG id.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Host to place task to.","Host to place task to.","Inputs which task should process.","Inputs which task should process.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Callback when some stage is completed.","Callback when a stage of some DAG is ready.","Callback when some task is completed.","Place all tasks of a given stage.","Callback when new NewDag is received by Runner.","Callback when new NewDag is received by Runner.","Remaining input to be processed in the future by yet …","Stage id.","Id of a task.","Vector of task placement.","","","","","","","","","","","","","Some stats from a completed simulation.","","","","Average makespan of a DAG among completed DAGs.","","","","","Total number of completed DAGs.","Average CPU utilization during simulation.","","","Finalize result given total_makespan;","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","Maximum makespan of a DAG among completed DAGs.","Average memory utilization during simulation.","Minimum makespan of a DAG among completed DAGs.","Total network traffic between different hosts.","Total network traffic between different racks.","Initialize new stats for a system with given number of …","Register CPU utilization measure in …","Register completed DAG with given makespan.","Register memory utilization measure in …","Register task with a given computation size.","Register completed transfer with given parameters.","","","Total number chunks in DFS in the end of the simulation.","Total CPU flops used by all completed tasks.","Total number of received DAGs.","Total time between first NewDag event and last simulation …","Total network traffic. Includes transfers with <code>src == dst</code>.","Fraction of the used space in the end of the simulation.","","","","","Event to start new DAG execution.","Main component of a simulation.","","","","","","","","","","","","DAG.","","Finalizes and logs DAG results.","Returns the argument unchanged.","Returns the argument unchanged.","Information about initial data for each input stage.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Creates new runner.","","Returns stats of a simulation. Call finalize before that.","","","Returns trace of a simulation.","","","","","","","","","Represents constant bandwidth network, see …","Represents fat tree network, see make_fat_tree_topology.","Represents one host.","Represents config for a network.","Represents shared bandwidth network, see …","Represents cluster.","Represents tree network, see make_tree_topology.","","","","","","","","","","Total number of cores on a host.","Total memory on a host.","Total space on a host.","","","","","","","Chunk size of DFS.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Read SystemConfig from YAML file. Panic on error.","Information about hosts.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Host name or “default”, see SystemConfig::hosts for …","Network of a cluster.","","","","Speed of a single core.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Dag completed.","Dag received by Runner.","Task is assigned to a host and waits for input data to be …","Task finished processing input.","Task is waiting in a queue of a specific host for enough …","Task stage is ready.","Task started processing input.","Trace of a simulation.","One trace event in a simulation.","","","","","","","","","","","","","","","","","","","Simulation events.","Returns the argument unchanged.","Returns the argument unchanged.","Information about hosts.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","Adds event to a trace.","Creates new trace.","","","(dag id, stage id, task id) if the event corresponds to a …","Time of an event.","","","","","","","","","","","Number of cores used.","DAG id.","DAG id.","DAG id.","DAG id.","DAG id.","DAG id.","DAG id.","Host.","Host.","Host where the task was run.","Amount of memory used.","Stage id.","Stage id.","Stage id.","Stage id.","Stage id.","Task id.","Task id.","Task id.","Task id.","Task id.","Time of the event.","Time of the event.","Time of the event.","Time of the event.","Time of the event.","Time of the event.","Time of the event."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,5,5,5,0,4,5,6,7,24,4,5,6,7,24,4,5,6,7,24,4,5,6,7,24,4,5,6,7,4,5,6,7,4,5,6,7,6,7,4,5,4,5,24,4,5,6,7,7,7,4,6,24,4,5,6,7,24,4,5,6,7,4,5,24,4,5,6,7,24,24,4,5,24,4,6,4,5,6,7,24,4,5,6,7,24,4,5,6,7,24,4,5,6,7,24,4,5,6,7,84,85,86,87,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,0,0,0,0,29,29,29,38,40,45,36,29,38,40,45,36,29,38,40,45,36,29,38,40,45,36,29,29,29,32,38,38,29,32,38,38,38,40,45,36,29,36,29,32,38,40,38,36,29,38,40,45,36,29,38,40,45,36,29,38,45,38,40,45,36,29,29,29,32,38,38,38,29,29,32,38,38,29,29,31,45,36,29,29,29,40,40,36,38,40,45,36,29,38,40,45,36,29,38,40,45,36,29,40,38,40,45,36,29,42,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,88,89,90,90,89,88,0,0,0,48,49,55,48,49,55,48,49,55,48,49,55,48,49,48,49,48,49,48,49,49,49,55,48,49,55,48,49,55,48,49,55,48,49,55,48,49,48,55,49,49,48,49,55,49,49,49,48,49,55,48,49,55,48,49,55,48,49,55,48,49,0,59,0,0,0,0,0,0,0,0,56,57,58,59,60,61,62,63,64,56,57,58,59,60,61,62,63,64,56,57,58,59,60,61,62,63,64,56,57,58,59,60,61,62,63,64,58,56,63,64,56,57,58,59,60,61,62,63,64,56,57,58,59,60,61,62,63,64,56,56,57,58,59,60,61,62,63,64,57,64,61,62,63,56,57,58,59,60,61,62,63,64,56,57,58,59,60,61,62,63,64,56,57,58,59,60,61,62,63,64,56,57,58,59,60,61,62,63,64,56,56,56,57,58,59,60,61,62,63,64,57,60,60,62,61,63,58,56,57,58,59,60,61,62,63,64,56,57,58,59,60,61,62,63,64,56,57,58,59,60,61,62,63,64,58,56,57,58,59,60,61,62,63,64,0,0,0,0,0,0,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,0,0,0,0,0,70,73,69,70,73,69,70,73,69,70,73,69,69,70,73,69,70,73,69,70,73,70,73,70,73,69,70,73,69,70,73,69,70,73,69,22,22,22,74,74,22,69,69,73,69,70,73,69,70,73,69,70,73,69,70,73,69,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,75,76,75,76,75,76,75,76,75,75,75,75,75,76,76,75,75,76,75,76,75,76,75,76,76,76,75,75,76,76,75,76,75,76,75,76,75,81,81,0,0,81,0,81,81,82,20,81,82,20,81,82,20,82,82,82,81,82,20,81,82,20,20,81,82,20,81,82,20,81,82,20,81,82,20,81,82,20,20,20,81,82,20,81,82,20,81,82,20,81,82,20,82,20,81,82,20,82,81,82,20,81,82,20,81,82,20,81,82,20,81,82,20,91,92,93,94,91,92,93,94,91,92,93,94,94,94,91,92,93,93,94,83,83,83,83,83,83,83,0,0,83,80,83,80,83,80,83,80,83,80,83,80,83,80,83,80,83,80,80,83,80,80,83,80,83,80,83,80,83,80,80,80,83,80,83,83,83,80,83,80,83,80,83,80,83,80,95,96,97,98,95,99,100,101,97,98,95,95,96,97,98,95,99,96,97,98,95,99,96,97,98,95,99,100,101],"f":"`````````````````````{{cb}d{}}000{cf{}}000000000{ce{}{}}000000000{hh}{jj}{ll}{nn}{{ce}d{}{}}000``{c{{A`{h}}}Ab}{c{{A`{j}}}Ab}{{cAd}{{A`{AfAh}}}{}}0{cc{}}0000{{cAj}n{{An{Al}}}}```:::::{{{B`{c}}}{{B`{f}}}{}}0000{{{Bb{c}}}{{Bb{f}}}{}}0{{{Bd{c}}}{{Bd{f}}}{}}0000{{BfnBh{B`{Bj}}{B`{Bl}}{Bn{Aj}}}C`}{C`Cb}{{hc}A`Cd}{{jc}A`Cd}```{ce{}{}}000{c{{A`{e}}}{}{}}000000000{cCf{}}000022222`````{{cb}d{}}{cf{}}0``44{ChCh}{{ce}d{}{}}``?`6=;```65546```````{{CjClCl{Bn{{B`{Cn}}}}}Cl}{{CjClBf}d}{{Cj{Db{{B`{D`}}}}Dd}Cl}55555555559999999999{Cj{{Df{Cl}}}}{{CjCl}Dh}{D`Dj}{DlDj}`{{}Cj}{{D`Bf}Dn}{{DlBf}Dn}`{cc{}}0000`{cCj{{An{Al}}}}{D`Bf}{DlBf}{E`Cl}``{Cj{{Eb{ClBf}}}}{ce{}{}}0000{{{B`{c}}}{{B`{f}}}{}}0000{{{Bb{c}}}{{Bb{f}}}{}}0{{{Bd{c}}}{{Bd{f}}}{}}0000{{CjCl}d}087`{{BfDjBfDnDn}Dl}>{{CjCl}{{Db{Cl}}}}{{D`Bf}Bf}{{DlBf}Bf}`{Cj{{Df{Cl}}}}0{{Cn{Ef{Ed}}EhCl}{{Db{{Db{Ed}}}}}}{{Ej{Ef{Ed}}EhCl}{{Db{{Db{Ed}}}}}}`{{CjCl}E`}{{CjCl}{{Db{Dh}}}}{Cj{{Db{E`}}}}{{E`Cl}D`}{E`{{Db{{B`{D`}}}}}}`{c{{A`{e}}}{}{}}000000000{cCf{}}0000{E`Dd}{ce{}{}}0000````{{cb}d{}}{cf{}}022{EdEd}{{ce}d{}{}}{{EdEl}En}{cc{}}6{{{B`{c}}}{{B`{f}}}{}}{{{Bb{c}}}{{Bb{f}}}{}}{{{Bd{c}}}{{Bd{f}}}{}}{EdBf}:==<:`````````99888888::::::{F`F`}{FbFb}88`{c{{A`{Fb}}}Ab}{{cAd}{{A`{AfAh}}}{}}{{FbEl}En}999???888777666`{{Bf{Db{F`}}{Db{{Ff{FdBh}}}}{Db{Fd}}{Db{Fd}}{Fl{Fh}{{Fj{{B`{Bj}}}}}}{Fl{Fh}{{Fj{{B`{Bl}}}}}}{Bn{Aj}}}Fn}````{{FnCl}{{Db{Fb}}}}`{{Fbc}A`Cd}`{ce{}{}}0{c{{A`{e}}}{}{}}00000{cCf{}}00222``````````{cf{}}00000000000000000333333333333333333````{c{{A`{G`}}}Ab}{c{{A`{Gb}}}Ab}{c{{A`{Gd}}}Ab}{c{{A`{Gf}}}Ab}{c{{A`{Gh}}}Ab}{c{{A`{Gj}}}Ab}{c{{A`{Gl}}}Ab}{c{{A`{Gn}}}Ab}{c{{A`{H`}}}Ab}{{cAd}{{A`{AfAh}}}{}}00000000`{cc{}}00000000`````>>>>>>>>>{{{B`{c}}}{{B`{f}}}{}}00000000{{{Bb{c}}}{{Bb{f}}}{}}00000000{{{Bd{c}}}{{Bd{f}}}{}}00000000``{{G`c}A`Cd}{{Gbc}A`Cd}{{Gdc}A`Cd}{{Gfc}A`Cd}{{Ghc}A`Cd}{{Gjc}A`Cd}{{Glc}A`Cd}{{Gnc}A`Cd}{{H`c}A`Cd}```````{c{{A`{e}}}{}{}}00000000000000000{cCf{}}00000000`{ce{}{}}00000000````{{{Ef{Ed}}Eh}{{Db{{Ff{Ed{Db{Hb}}}}}}}}{{Hd{Ef{c}}}d{}}`{cf{}}033{{}Hf}{cc{}}5{{{B`{c}}}{{B`{f}}}{}}{{{Bb{c}}}{{Bb{f}}}{}}{{{Bd{c}}}{{Bd{f}}}{}}4{{cClClCj{Eb{Cl{Db{Ed}}}}{Eb{Cl{Db{{Db{Ed}}}}}}Eh{Eb{DjCh}}Hh}{{Db{Hj}}}{}}0{{cClClClCj{Eb{Cl{Db{Ed}}}}{Eb{Cl{Db{{Db{Ed}}}}}}Eh{Eb{DjCh}}Hh}{{Db{Hj}}}{}}{{HfClE`Cj{Ef{Ed}}{Ef{{Db{Ed}}}}Eh{Eb{HbCh}}Hh}{{Db{Hl}}}}{{cClCj}d{}}>>=<`99<<7<654{{DnDn}Hn}{{HnClClCj{Eb{Cl{Db{Ed}}}}{Eb{Cl{Db{{Db{Ed}}}}}}Eh{Eb{HbCh}}Hh}{{Db{Hj}}}}0{{HnClClClCj{Eb{Cl{Db{Ed}}}}{Eb{Cl{Db{{Db{Ed}}}}}}Eh{Eb{HbCh}}Hh}{{Db{Hj}}}}{c{{A`{e}}}{}{}}0{cCf{}}{ce{}{}}`??00{{}I`}>1=<;0::9{{I`ClE`Cj{Ef{Ed}}{Ef{{Db{Ed}}}}Eh{Eb{HbCh}}Hh}{{Db{Hl}}}}84432`````{cf{}}00000333333`{{HlEl}En}{{IbEl}En}{{HjEl}En}{cc{}}00````777{{{B`{c}}}{{B`{f}}}{}}00{{{Bb{c}}}{{Bb{f}}}{}}00{{{Bd{c}}}{{Bd{f}}}{}}00{{BlClClCj{Eb{Cl{Db{Ed}}}}{Eb{Cl{Db{{Db{Ed}}}}}}Eh{Eb{HbCh}}Hh}{{Db{Hj}}}}0{{BlClClClCj{Eb{Cl{Db{Ed}}}}{Eb{Cl{Db{{Db{Ed}}}}}}Eh{Eb{HbCh}}Hh}{{Db{Hj}}}}{{IdClE`Cj{Ef{Ed}}{Ef{{Db{Ed}}}}Eh{Eb{HbCh}}Hh}{{Db{Hl}}}}{{IdClCj}d}{{BlClCj}d}````{c{{A`{e}}}{}{}}00000{cCf{}}00{ce{}{}}00`{{cb}d{}}{cf{}}0`22{CbCb}{{ce}d{}{}}``{c{{A`{Cb}}}Ab}{{cAd}{{A`{AfAh}}}{}}{{CbDn}d}{{CbEl}En}{cc{}}9{{{B`{c}}}{{B`{f}}}{}}{{{Bb{c}}}{{Bb{f}}}{}}{{{Bd{c}}}{{Bd{f}}}{}}`````{{DjBf}Cb}6666{{CbDn{Ff{HbCl}}{Ff{HbCl}}}d}{{Cbc}A`Cd}?``````{c{{A`{e}}}{}{}}0{cCf{}}{ce{}{}}``{{cb}d{}}{cf{}}0002222{IfIf}{{ce}d{}{}}`{{cAd}{{A`{AfAh}}}{}}{Ihd}??`66>><<{{{B`{Bl}}{Eb{HbCh}}{Bd{{Ij{Eh}}}}{Bd{{Ij{Hh}}}}Il}Ih}{{IhIn}d}{IhCb}{{Ifc}A`Cd}:{IhJ`}====<<;;```````:::999999```;;;;;;`{JbJb}{JdJd}{BhBh}:::{c{{A`{Jb}}}Ab}{c{{A`{Jd}}}Ab}{c{{A`{Bh}}}Ab}<<<{cc{}}00{cBh{{An{Al}}}}`{ce{}{}}00{{{B`{c}}}{{B`{f}}}{}}00{{{Bb{c}}}{{Bb{f}}}{}}00{{{Bd{c}}}{{Bd{f}}}{}}00``{{Jbc}A`Cd}{{Jdc}A`Cd}{{Bhc}A`Cd}`666{c{{A`{e}}}{}{}}00000{cCf{}}00888````````````````````````````{{cb}d{}}0{cf{}}000::::{JfJf}{J`J`}{{ce}d{}{}}0{c{{A`{Jf}}}Ab}{c{{A`{J`}}}Ab}{{cAd}{{A`{AfAh}}}{}}0`{cc{}}0`{ce{}{}}0{{{B`{c}}}{{B`{f}}}{}}0{{{Bb{c}}}{{Bb{f}}}{}}0{{{Bd{c}}}{{Bd{f}}}{}}0{{J`Jf}d}{{{Db{Jd}}}J`}{{Jfc}A`Cd}{{J`c}A`Cd}{Jf{{Bn{{Ff{ClClCl}}}}}}{JfDn}99{c{{A`{e}}}{}{}}000{cCf{}}0;;`````````````````````````````","c":[],"p":[[5,"Private",913],[1,"unit"],[10,"Any",914],[5,"GlobalInputPlan",12],[6,"InputPlan",12],[5,"DagPlan",12],[5,"SimulationPlan",12],[6,"Result",915],[10,"Deserializer",916],[10,"Serializer",917],[5,"Ok",917],[5,"Error",918],[5,"PathBuf",919],[5,"Path",919],[10,"AsRef",920],[5,"Box",921],[5,"Arc",922],[5,"Rc",923],[1,"u64"],[5,"SystemConfig",734],[10,"ReplicationStrategy",924],[10,"DynamicPlacementStrategy",590],[6,"Option",925],[5,"ClusterSimulation",12],[5,"RunStats",652],[10,"Serializer",926],[5,"TypeId",914],[5,"ComputeHost",120],[5,"Dag",145],[1,"usize"],[10,"Shuffle",145],[10,"Task",145],[5,"Vec",927],[1,"bool"],[5,"BTreeSet",928],[5,"Connection",145],[1,"u32"],[5,"SimpleTask",145],[1,"f64"],[5,"Stage",145],[5,"BTreeMap",929],[6,"DataItem",257],[1,"slice"],[5,"DistributedFileSystem",930],[5,"UniformShuffle",145],[5,"Formatter",931],[8,"Result",931],[5,"Plan",286],[5,"RunResult",286],[5,"String",932],[1,"tuple"],[1,"str"],[17,"Output"],[1,"fn"],[5,"Experiment",286],[5,"YamlTask",350],[5,"YamlConnection",350],[5,"YamlStage",350],[6,"ShuffleType",350],[5,"StageInitialData",350],[5,"YamlDag",350],[5,"YamlStageInputPlan",350],[5,"YamlDagPlan",350],[5,"YamlSimulationPlan",350],[8,"Id",933],[8,"Pcg64",934],[5,"LocalityAwareStrategy",530],[5,"Network",935],[5,"StageActions",590],[5,"TaskPlacement",590],[5,"PackingScheduler",551],[5,"RandomPlacementStrategy",569],[5,"DynamicTaskPlacement",590],[10,"PlacementStrategy",590],[5,"NewDag",695],[5,"Runner",695],[5,"RefCell",936],[5,"SimulationContext",937],[5,"Event",938],[5,"Trace",829],[6,"NetworkConfig",734],[5,"HostConfig",734],[6,"TraceEvent",829],[15,"RegisterOnStart",116],[15,"RegisterInitially",116],[15,"Local",116],[15,"GlobalInput",116],[15,"Chunk",280],[15,"Replicated",280],[15,"Local",280],[15,"Constant",810],[15,"Shared",810],[15,"Tree",810],[15,"FatTree",810],[15,"TaskStarted",884],[15,"TaskReady",884],[15,"TaskInQueue",884],[15,"TaskAssigned",884],[15,"TaskCompleted",884],[15,"DagStarted",884],[15,"DagCompleted",884]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
